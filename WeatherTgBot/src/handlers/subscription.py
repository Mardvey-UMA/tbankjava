from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, time

from src.bot.states import SubscriptionStates
from src.keyboards.subscription import (
    get_subscription_menu_keyboard,
    get_timezone_keyboard,
    get_time_keyboard,
    get_edit_subscription_keyboard
)
from src.keyboards.main_menu import get_main_menu_keyboard
from src.services.weather_service import WeatherService
from src.models.weather import (
    SubscriptionRequestDTO,
    SubscriptionUpdateDTO
)

router = Router()

@router.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑—ã")
async def subscription_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_menu_keyboard()
    )

@router.callback_query(F.data == "create_subscription")
async def create_subscription_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=None
    )
    await state.set_state(SubscriptionStates.waiting_for_city)

@router.message(SubscriptionStates.waiting_for_city)
async def process_subscription_city(message: Message, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    data = await state.get_data()
    is_edit = data.get("is_edit", False)
    
    try:
        if is_edit:
            request = SubscriptionUpdateDTO(
                city_name=message.text
            )
            
            response = await weather_service.update_subscription(
                message.from_user.id,
                request
            )
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ì–æ—Ä–æ–¥: {message.text}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
            await state.clear()
        else:
            await state.update_data(city=message.text)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
                reply_markup=get_time_keyboard()
            )
            await state.set_state(SubscriptionStates.waiting_for_time)
    except Exception as e:
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        await state.clear()
        raise

@router.message(SubscriptionStates.waiting_for_time)
async def process_subscription_time_input(message: Message, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_str = message.text.strip()
        if not time_str or ":" not in time_str:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):"
            )
            return
        
        hour, minute = map(int, time_str.split(":"))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59."
            )
            return
        
        data = await state.get_data()
        is_edit = data.get("is_edit", False)
        
        if is_edit:
            request = SubscriptionUpdateDTO(
                notification_time=time_str
            )
            
            response = await weather_service.update_subscription(
                message.from_user.id,
                request
            )
            
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {time_str}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
            await state.clear()
        else:
            await state.update_data(notification_time=time_str)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):",
                reply_markup=get_timezone_keyboard()
            )
            await state.set_state(SubscriptionStates.waiting_for_timezone)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):"
        )
    except Exception as e:
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        await state.clear()
        raise

@router.message(SubscriptionStates.waiting_for_timezone)
async def process_subscription_timezone_input(message: Message, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    timezone = message.text.strip()
    data = await state.get_data()
    
    try:
        if data.get("is_edit", False):
            request = SubscriptionUpdateDTO(
                time_zone=timezone
            )
            
            response = await weather_service.update_subscription(
                message.from_user.id,
                request
            )
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ì–æ—Ä–æ–¥: {response.city_name}\n"
                f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.notification_time}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
        else:
            request = SubscriptionRequestDTO(
                city_name=data.get("city"),
                notification_time=data.get("notification_time"),
                time_zone=timezone
            )
            response = await weather_service.create_subscription(
                message.from_user.id,
                request
            )
            await message.answer(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
                f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data.get('notification_time')}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
        
    except Exception as e:
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        raise
    finally:
        await state.clear()

@router.callback_query(F.data == "edit_subscription")
async def edit_subscription_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_edit_subscription_keyboard()
    )

@router.callback_query(F.data == "edit_city")
async def edit_subscription_city(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(is_edit=True)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=None
    )
    await state.set_state(SubscriptionStates.waiting_for_city)

@router.callback_query(F.data == "edit_time")
async def edit_subscription_time(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(is_edit=True)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_time)

@router.callback_query(F.data == "edit_timezone")
async def edit_subscription_timezone(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(is_edit=True)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):",
        reply_markup=get_timezone_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_timezone)

@router.callback_query(F.data == "skip_edit")
async def skip_edit(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_subscription_menu_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_menu_keyboard()
    )

@router.callback_query(F.data == "delete_subscription")
async def delete_subscription(
    callback: CallbackQuery,
    weather_service: WeatherService
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await weather_service.delete_subscription(callback.from_user.id)
        await callback.message.edit_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_subscription_menu_keyboard()
        )
    except Exception as e:
        await callback.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        raise

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data.startswith("time_"))
async def process_subscription_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    time_str = callback.data.split("_")[1]
    await state.update_data(notification_time=time_str)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow):",
        reply_markup=get_timezone_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_timezone)

@router.callback_query(F.data == "subscription_info")
async def show_subscription_info(callback: CallbackQuery, weather_service: WeatherService):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
    try:
        info = await weather_service.get_subscription_info(callback.from_user.id)
        
        if info:
            await callback.message.edit_text(
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
                f"üèô –ì–æ—Ä–æ–¥: {info['cityName']}\n"
                f"üïí –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {info['notificationTime']}\n"
                f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {info['timeZone']}",
                reply_markup=get_subscription_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–≥–æ–¥—ã.",
                reply_markup=get_subscription_menu_keyboard()
            )
    except Exception as e:
        await callback.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        raise

@router.callback_query(F.data.startswith("timezone_"))
async def process_subscription_timezone(callback: CallbackQuery, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezone = callback.data.split("_")[1]
    data = await state.get_data()
    
    try:
        if data.get("is_edit", False):
            request = SubscriptionUpdateDTO(
                time_zone=timezone
            )
            
            response = await weather_service.update_subscription(
                callback.from_user.id,
                request
            )
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
        else:
            request = SubscriptionRequestDTO(
                city_name=data.get("city"),
                notification_time=data.get("notification_time"),
                time_zone=timezone
            )
            response = await weather_service.create_subscription(
                callback.from_user.id,
                request
            )
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
                f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data.get('notification_time')}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=get_subscription_menu_keyboard()
            )
        
    except Exception as e:
        await callback.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_subscription_menu_keyboard()
        )
        raise
    finally:
        await state.clear() 