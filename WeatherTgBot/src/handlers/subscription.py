from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, time

from src.bot.states import SubscriptionStates
from src.keyboards.subscription import (
    get_subscription_menu_keyboard,
    get_timezone_keyboard,
    get_time_keyboard
)
from src.keyboards.main_menu import get_cancel_keyboard
from src.services.weather_service import WeatherService
from src.models.weather import SubscriptionRequest

router = Router()

@router.message(F.text == "üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑")
async def subscription_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_menu_keyboard()
    )

@router.callback_query(F.data == "create_subscription")
async def create_subscription_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_city)

@router.message(SubscriptionStates.waiting_for_city)
async def process_subscription_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.update_data(city=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=get_time_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_time)

@router.callback_query(F.data.startswith("time_"))
async def process_subscription_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    time_str = callback.data.split("_")[1]
    hour, minute = map(int, time_str.split(":"))
    notification_time = time(hour=hour, minute=minute)
    
    await state.update_data(notification_time=notification_time)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=get_timezone_keyboard()
    )
    await state.set_state(SubscriptionStates.waiting_for_timezone)

@router.callback_query(F.data.startswith("tz_"))
async def process_subscription_timezone(
    callback: CallbackQuery,
    state: FSMContext,
    weather_service: WeatherService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    timezone = callback.data.split("_")[1]
    data = await state.get_data()
    
    try:
        request = SubscriptionRequest(
            city_name=data["city"],
            notification_time=data["notification_time"],
            time_zone=timezone
        )
        
        response = await weather_service.create_subscription(
            callback.from_user.id,
            request
        )
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–ì–æ—Ä–æ–¥: {data['city']}\n"
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data['notification_time'].strftime('%H:%M')}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n\n"
            f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {response.expected_next_notification_date_time_formatted.strftime('%Y-%m-%d %H:%M')}"
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        raise
    finally:
        await state.clear()

@router.callback_query(F.data == "delete_subscription")
async def delete_subscription(
    callback: CallbackQuery,
    weather_service: WeatherService
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await weather_service.delete_subscription(callback.from_user.id)
        await callback.message.edit_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
    except Exception as e:
        await callback.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        raise

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:"
    ) 