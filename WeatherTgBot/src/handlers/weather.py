from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import logging
from typing import List
from datetime import datetime

from src.bot.states import WeatherStates
from src.keyboards.weather import (
    get_weather_options_keyboard,
    get_hour_keyboard,
    get_quick_dates_keyboard,
    get_date_range_keyboard
)
from src.keyboards.main_menu import get_main_menu_keyboard
from src.services.weather_service import WeatherService
from src.models.weather import WeatherRequest, WeatherForecast

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=get_weather_options_keyboard()
    )

@router.callback_query(F.data == "weather_now")
async def weather_now(callback: CallbackQuery, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã"""
    logger.info("–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now().strftime("%Y-%m-%d")
    await state.set_state(WeatherStates.waiting_for_city)
    await state.update_data(weather_type="now", selected_date=current_date)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await callback.answer()

def format_weather_message(forecasts: List[WeatherForecast], start_idx: int, end_idx: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    message = []
    for forecast in forecasts[start_idx:end_idx]:
        message.append(
            f"üïí {forecast.time[:5]}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast.temp:.1f}¬∞C\n"
            f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {forecast.feels_like:.1f}¬∞C\n"
            f"üí® –í–µ—Ç–µ—Ä: {forecast.wind_speed:.1f} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast.humidity:.1f}%\n"
            f"üå™ –î–∞–≤–ª–µ–Ω–∏–µ: {forecast.pressure:.1f} –ü–∞\n"
            f"‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: {forecast.uv_index:.1f}\n"
        )
    return "\n".join(message)

@router.message(WeatherStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext, weather_service: WeatherService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        weather_type = state_data.get('weather_type')
        selected_date = state_data.get('selected_date')
        selected_hour = state_data.get('selected_hour')
        start_date = state_data.get('start_date')
        end_date = state_data.get('end_date')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        request = WeatherRequest(city_name=city)
        
        if weather_type == 'now':
            # –î–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            request.date = selected_date
            response = await weather_service.get_weather(request)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–∞—Å—Ç—è–º–∏ –ø–æ 6 —á–∞—Å–æ–≤
            total_forecasts = len(response.forecasts)
            for i in range(0, total_forecasts, 6):
                end_idx = min(i + 6, total_forecasts)
                part_message = format_weather_message(response.forecasts, i, end_idx)
                await message.answer(
                    f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {selected_date}:\n\n{part_message}"
                )
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            if selected_date:
                request.date = selected_date
            if selected_hour:
                request.hour = selected_hour
            if start_date:
                request.start_date = start_date
            if end_date:
                request.end_date = end_date
            
            response = await weather_service.get_weather(request)
            
            if weather_type in ['date', 'date_time']:
                if selected_hour:
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ
                    forecast = response.forecasts[0]
                    await message.answer(
                        f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {selected_date} –≤ {selected_hour}:00:\n\n"
                        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast.temp:.1f}¬∞C\n"
                        f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {forecast.feels_like:.1f}¬∞C\n"
                        f"üí® –í–µ—Ç–µ—Ä: {forecast.wind_speed:.1f} –º/—Å\n"
                        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast.humidity:.1f}%\n"
                        f"üå™ –î–∞–≤–ª–µ–Ω–∏–µ: {forecast.pressure:.1f} –ü–∞\n"
                        f"‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: {forecast.uv_index:.1f}",
                        reply_markup=get_main_menu_keyboard()
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–∞—Å—Ç—è–º–∏ –ø–æ 6 —á–∞—Å–æ–≤
                    total_forecasts = len(response.forecasts)
                    for i in range(0, total_forecasts, 6):
                        end_idx = min(i + 6, total_forecasts)
                        part_message = format_weather_message(response.forecasts, i, end_idx)
                        await message.answer(
                            f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {selected_date}:\n\n{part_message}"
                        )
            elif weather_type == 'range':
                # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 6 —á–∞—Å–æ–≤
                total_forecasts = len(response.forecasts)
                current_date = None
                current_part = []
                
                for i, forecast in enumerate(response.forecasts):
                    if forecast.date != current_date:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
                        if current_part:
                            part_message = format_weather_message(current_part, 0, len(current_part))
                            await message.answer(
                                f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {current_date}:\n\n{part_message}"
                            )
                        current_date = forecast.date
                        current_part = [forecast]
                    else:
                        current_part.append(forecast)
                        # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ 6 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        if len(current_part) == 6:
                            part_message = format_weather_message(current_part, 0, 6)
                            await message.answer(
                                f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {current_date}:\n\n{part_message}"
                            )
                            current_part = []
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–≥–Ω–æ–∑—ã
                if current_part:
                    part_message = format_weather_message(current_part, 0, len(current_part))
                    await message.answer(
                        f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {current_date}:\n\n{part_message}"
                    )
            
            if not selected_hour:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Å
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu_keyboard()
                )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "select_date")
async def select_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    logger.info("–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É")
    await state.set_state(WeatherStates.waiting_for_date)
    await state.update_data(weather_type="date")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_quick_dates_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "select_date_time")
async def select_date_time(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    logger.info("–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")
    await state.set_state(WeatherStates.waiting_for_date)
    await state.update_data(weather_type="date_time")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_quick_dates_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "select_date_range")
async def select_date_range(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    logger.info("–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    await state.set_state(WeatherStates.waiting_for_date_range_start)
    await state.update_data(weather_type="range")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
        reply_markup=get_date_range_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("date_"))
async def process_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    date = callback.data.split("_")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
    await state.update_data(selected_date=date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    data = await state.get_data()
    weather_type = data.get("weather_type")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å–∞
    if weather_type == "date_time":
        await state.set_state(WeatherStates.waiting_for_hour)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
            reply_markup=get_hour_keyboard()
        )
    else:
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    
    await callback.answer()

@router.callback_query(F.data.startswith("hour_"))
async def process_hour(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞"""
    hour = callback.data.split("_")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞—Å: {hour}")
    await state.update_data(selected_hour=hour)
    await state.set_state(WeatherStates.waiting_for_city)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def cancel_weather(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≥–æ–¥—ã"""
    logger.info("–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã")
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_weather_options_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("range_date_"))
async def process_range_date(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    date = callback.data.split("_")[2]
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {date}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    if current_state == WeatherStates.waiting_for_date_range_start:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é
        await state.update_data(start_date=date)
        await state.set_state(WeatherStates.waiting_for_date_range_end)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=get_date_range_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –¥–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
        await state.update_data(end_date=date)
        await state.set_state(WeatherStates.waiting_for_city)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    
    await callback.answer() 