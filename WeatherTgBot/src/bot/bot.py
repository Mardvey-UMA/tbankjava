import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from typing import Any, Awaitable, Callable, Dict

from src.config.config import Config
from src.services.weather_service import WeatherService
from src.services.kafka_service import KafkaService
from src.handlers import start, weather, subscription
from src.middleware.error_handler import ErrorHandlerMiddleware

logger = logging.getLogger(__name__)

class ServiceMiddleware:
    """Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    
    def __init__(self, weather_service: WeatherService):
        self.weather_service = weather_service
    
    async def __call__(
        self,
        handler: Callable[[Any, Dict[str, Any]], Awaitable[Any]],
        event: Any,
        data: Dict[str, Any]
    ) -> Any:
        data["weather_service"] = self.weather_service
        return await handler(event, data)

class WeatherBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self, config: Config):
        self.config = config
        self.bot = Bot(token=config.tg_bot.token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.weather_service = WeatherService(config)
        self.kafka_service = KafkaService(config)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        self._setup_middleware()
    
    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.dp.include_router(start.router)
        self.dp.include_router(weather.router)
        self.dp.include_router(subscription.router)
    
    def _setup_middleware(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware"""
        # Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        self.dp.message.middleware(ErrorHandlerMiddleware())
        self.dp.callback_query.middleware(ErrorHandlerMiddleware())
        
        # Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        service_middleware = ServiceMiddleware(self.weather_service)
        self.dp.message.middleware(service_middleware)
        self.dp.callback_query.middleware(service_middleware)
    
    async def _handle_kafka_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = message.get('userId')
            forecast = message.get('forecast')
            
            if not user_id or not forecast:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_text = (
                f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {forecast.get('cityName')}:\n\n"
                f"üìÖ –î–∞—Ç–∞: {forecast.get('date')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {forecast.get('time')}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {forecast.get('temp')}¬∞C\n"
                f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {forecast.get('feelsLike')}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {forecast.get('windSpeed')} –º/—Å\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {forecast.get('humidity')}%\n"
                f"üå™ –î–∞–≤–ª–µ–Ω–∏–µ: {forecast.get('pressure')} –º–º —Ä—Ç.—Å—Ç.\n"
                f"‚òÄÔ∏è –£–§-–∏–Ω–¥–µ–∫—Å: {forecast.get('uvIndex')}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(user_id, forecast_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka
            # kafka_task = asyncio.create_task(
            #     self.kafka_service.start(self._handle_kafka_message)
            # )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka
            # self.kafka_service.stop()
            # await kafka_task
            pass
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()
        await self.weather_service.close()

def run_bot(config: Config):
    bot = WeatherBot(config)
    asyncio.run(bot.start()) 